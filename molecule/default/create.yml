---
- name: Playbook for resource creation
  hosts: localhost
  connection: local
  gather_facts: false
  no_log: "{{ not lookup('env', 'MOLECULE_DEBUG') | bool }}"

  tasks:
    - name: Create security group
      os_security_group:
        cloud: molecule
        name: "{{ security_group_name }}"
        description: "{{ security_group_description }}"
      register: security_group

    - name: Create security group rules
      os_security_group_rule:
        cloud: molecule
        security_group: "{{ security_group_name }}"
        protocol: "{{ item.proto | default(omit) }}"
        port_range_min: "{{ item.port | default(omit) }}"
        port_range_max: "{{ item.port | default(omit) }}"
        remote_ip_prefix: "{{ item.cidr | default(omit) }}"
        remote_group: "{{ item.group | default(omit) }}"
        ethertype: "{{ item.ethertype | default(omit) }}"
      loop: "{{ security_group_rules }}"

    - name: Test for presence of local keypair
      stat:
        path: "{{ keypair_path }}"
      register: keypair_local

    - name: Delete remote keypair
      os_keypair:
        cloud: molecule
        name: "{{ keypair_name }}"
        state: absent
      when: not keypair_local.stat.exists

    - name: Create keypair
      os_keypair:
        cloud: molecule
        name: "{{ keypair_name }}"
      register: keypair

    - name: Persist the keypair
      copy:
        dest: "{{ keypair_path }}"
        content: "{{ keypair.key.private_key }}"
        mode: 0600
      when: keypair.changed

    - name: Create molecule instance(s)
      os_server:
        cloud: molecule
        availability_zone: "{{ nova.availability_zone }}"
        name: "{{ item.name }}"
        image: "{{ nova.image_name }}"
        flavor: "{{ nova.flavor_name }}"
        security_groups:
          - "{{ security_group_name }}"
        key_name: "{{ keypair_name }}"
        nics:
          - net-name: "{{ nova.network_name }}"
        config_drive: yes
        delete_fip: yes
        auto_ip: no
        timeout: 360
      register: server
      loop: "{{ molecule_yml.platforms }}"
      async: 7200
      poll: 0

    - name: Wait for instance(s) creation to complete
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: os_jobs_server
      until: os_jobs_server.finished
      retries: 300
      loop: "{{ server.results }}"

    - name: Assing public address(es)
      os_floating_ip:
        cloud: molecule
        server: "{{ item.name }}"
        network: "{{ nova.floating_ip_pool }}"
        wait: yes
      register: floating_ip
      loop: "{{ molecule_yml.platforms }}"
      async: 7200
      poll: 0

    - name: Wait for public address(es) assignment to complete
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: os_jobs_floating_ip
      until: os_jobs_floating_ip.finished
      retries: 300
      loop: "{{ floating_ip.results }}"

    # Mandatory configuration for molecule to function.

    - name: Populate instance config dict
      set_fact:
        instance_conf_dict: {
          'instance': "{{ item.0.openstack.name }}",
          'address': "{{ item.1.floating_ip.floating_ip_address }}",
          'user': "{{ ssh_user }}",
          'port': "{{ ssh_port }}",
          'identity_file': "{{ keypair_path }}"}
      with_together:
        - "{{ os_jobs_server.results }}"
        - "{{ os_jobs_floating_ip.results }}"
      register: instance_config_dict
      when: server.changed | bool

    - name: Convert instance config dict to a list
      set_fact:
        instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"
      when: server.changed | bool

    - name: Dump instance config
      copy:
        content: "{{ instance_conf | to_json | from_json | molecule_to_yaml | molecule_header }}"
        dest: "{{ molecule_instance_config }}"
      when: server.changed | bool

    - name: Wait for SSH
      wait_for:
        port: "{{ ssh_port }}"
        host: "{{ item.address }}"
        search_regex: SSH
      loop: "{{ lookup('file', molecule_instance_config) | molecule_from_yaml }}"
